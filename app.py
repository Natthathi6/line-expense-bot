from flask import Flask, request, send_file
import os
import sqlite3
from datetime import datetime
import requests
from openpyxl import Workbook
import pandas as pd

app = Flask(__name__)
LINE_TOKEN = os.environ.get("CHANNEL_ACCESS_TOKEN")

def get_user_name(user_id):
    return {
        "Uf2299afc5c6a03b031ac70eefc750259": "Choy",
        "U8a82b2393123c38a238144698e8fd19b": "Pupae"
    }.get(user_id, "‡∏Ñ‡∏∏‡∏ì")

def reply_text(reply_token, text):
    headers = {
        'Authorization': f'Bearer {LINE_TOKEN}',
        'Content-Type': 'application/json'
    }
    payload = {
        'replyToken': reply_token,
        'messages': [{'type': 'text', 'text': text}]
    }
    requests.post('https://api.line.me/v2/bot/message/reply', headers=headers, json=payload)

@app.route("/")
def index():
    return "‚úÖ LINE Income/Expense Bot is running!"

@app.route("/webhook", methods=["POST"])
def webhook():
    data = request.get_json()
    try:
        msg = data["events"][0]["message"]["text"]
        user_id = data["events"][0]["source"]["userId"]
        reply_token = data["events"][0]["replyToken"]
    except:
        return "ignored", 200

    conn = sqlite3.connect("runtime.db")
    conn.execute("""
        CREATE TABLE IF NOT EXISTS records (
            user_id TEXT,
            item TEXT,
            amount REAL,
            category TEXT,
            type TEXT,
            date TEXT
        )
    """)

    today = datetime.now()
    today_str = today.strftime('%Y-%m-%d')
    today_display = today.strftime('%d-%m-%Y')

    if msg.lower().strip() == "export":
        rows = conn.execute("SELECT user_id, item, amount, category, type, date FROM records").fetchall()
        wb = Workbook()
        ws1 = wb.active
        ws1.title = "Income"
        ws1.append(["User", "Item", "Amount", "Category", "Date"])
        for r in rows:
            if r[4] == "income":
                ws1.append([get_user_name(r[0]), r[1], r[2], r[3], datetime.strptime(r[5], "%Y-%m-%d").strftime("%d-%m-%Y")])

        ws2 = wb.create_sheet(title="Expense")
        ws2.append(["User", "Item", "Amount", "Category", "Date"])
        for r in rows:
            if r[4] == "expense":
                ws2.append([get_user_name(r[0]), r[1], r[2], r[3], datetime.strptime(r[5], "%Y-%m-%d").strftime("%d-%m-%Y")])

        file_path = "records_export.xlsx"
        wb.save(file_path)
        conn.close()
        return send_file(file_path, as_attachment=True)

    # ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ
    if msg.lower().startswith("‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ"):
        try:
            _, range_str = msg.split("‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ")
            d1, d2 = range_str.strip().split("-")
            d1 = datetime.strptime(d1.strip() + "/2025", "%d/%m/%Y")
            d2 = datetime.strptime(d2.strip() + "/2025", "%d/%m/%Y")
            df = pd.read_sql_query("SELECT * FROM records WHERE type='income'", conn)
            df["date"] = pd.to_datetime(df["date"])
            df = df[(df["user_id"] == user_id) & (df["date"] >= d1) & (df["date"] <= d2)]
            if df.empty:
                reply_text(reply_token, "üìç ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏")
                return "no income", 200

            summary = df.groupby("item")["amount"].sum()
            cat_summary = df.groupby("category")["amount"].sum()
            total = df["amount"].sum()
            lines = [f"üìÖ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ {d1.strftime('%d/%m')} - {d2.strftime('%d/%m')}"]
            lines.append(f"üíµ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°: {cat_summary.get('‡∏£‡∏ß‡∏°', 0):,.0f} ‡∏ö‡∏≤‡∏ó")
            lines.append(f"üçü ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£: {cat_summary.get('‡∏≠‡∏≤‡∏´‡∏≤‡∏£', 0):,.0f} ‡∏ö‡∏≤‡∏ó")
            lines.append(f"üç∫ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°: {cat_summary.get('‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°', 0):,.0f} ‡∏ö‡∏≤‡∏ó\n")
            lines.append(f"üìå ‡πÇ‡∏≠‡∏ô: {summary.get('‡πÅ‡∏¢‡∏Å‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÇ‡∏≠‡∏ô', 0):,.0f} ‡∏ö‡∏≤‡∏ó")
            lines.append(f"üìå ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î: {summary.get('‡πÅ‡∏¢‡∏Å‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î', 0):,.0f} ‡∏ö‡∏≤‡∏ó")
            lines.append(f"üìå ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï: {summary.get('‡πÅ‡∏¢‡∏Å‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï', 0):,.0f} ‡∏ö‡∏≤‡∏ó")
            reply_text(reply_token, "\n".join(lines))
            return "ok", 200
        except:
            reply_text(reply_token, "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏¥‡∏î ‡πÄ‡∏ä‡πà‡∏ô: ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ 1-7/06/2025")
            return "fail", 200

    # ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
    if msg.lower().startswith("‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"):
        try:
            _, range_str = msg.split("‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢")
            d1, d2 = range_str.strip().split("-")
            d1 = datetime.strptime(d1.strip() + "/2025", "%d/%m/%Y")
            d2 = datetime.strptime(d2.strip() + "/2025", "%d/%m/%Y")
            df = pd.read_sql_query("SELECT * FROM records WHERE type='expense'", conn)
            df["date"] = pd.to_datetime(df["date"])
            df = df[(df["user_id"] == user_id) & (df["date"] >= d1) & (df["date"] <= d2)]
            if df.empty:
                reply_text(reply_token, "üìç ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á‡∏ó‡∏µ‡πà‡∏£‡∏∞‡∏ö‡∏∏")
                return "no expense", 200

            total = df["amount"].sum()
            reply_text(reply_token, f"üìä ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ {d1.strftime('%d/%m')} - {d2.strftime('%d/%m')}\nüí∏ ‡∏£‡∏ß‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {total:,.0f} ‡∏ö‡∏≤‡∏ó")
            return "ok", 200
        except:
            reply_text(reply_token, "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏¥‡∏î ‡πÄ‡∏ä‡πà‡∏ô: ‡∏£‡∏ß‡∏°‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢ 1-7/06/2025")
            return "fail", 200

    # ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ/‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢
    if msg.startswith("‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ") or msg.startswith("‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢"):
        try:
            parts = msg.strip().split()
            d = datetime.strptime(parts[-1], "%d-%m-%Y").strftime("%Y-%m-%d")
            t = "income" if "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ" in parts[0] else "expense"
            conn.execute("DELETE FROM records WHERE user_id=? AND date=? AND type=?", (user_id, d, t))
            conn.commit()
            reply_text(reply_token, f"üßπ ‡∏•‡∏ö{'‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ' if t == 'income' else '‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢'}‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {parts[-1]} ‡πÅ‡∏•‡πâ‡∏ß")
            return "deleted", 200
        except:
            reply_text(reply_token, "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏¥‡∏î ‡πÄ‡∏ä‡πà‡∏ô: ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ 02-06-2025")
            return "invalid del", 200

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÉ‡∏™‡πà‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÅ‡∏ö‡∏ö pattern ‡πÉ‡∏´‡∏°‡πà
    if msg.startswith("‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà"):
        try:
            lines = msg.strip().split("\n")
            date_str = lines[0].replace("‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà", "").strip()
            date_obj = datetime.strptime(date_str, "%d/%m/%Y")
            date_iso = date_obj.strftime("%Y-%m-%d")
            summary = {"‡∏£‡∏ß‡∏°": 0, "‡∏≠‡∏≤‡∏´‡∏≤‡∏£": 0, "‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°": 0, "‡πÇ‡∏≠‡∏ô": 0, "‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î": 0, "‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï": 0}
            records = []
            for line in lines[1:]:
                for key in summary.keys():
                    if f"‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ{key}" in line or f"‡πÅ‡∏¢‡∏Å‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ{key}" in line:
                        parts = line.strip().split()
                        if len(parts) >= 2:
                            try:
                                amount = float(parts[1].replace(",", ""))
                                summary[key] += amount
                                records.append((user_id, parts[0], amount, key, "income", date_iso))
                            except:
                                continue
            if records:
                conn.executemany("INSERT INTO records VALUES (?, ?, ?, ?, ?, ?)", records)
                conn.commit()
                lines = [f"üìÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà {date_obj.strftime('%d-%m-%Y')}"]
                lines.append(f"üíµ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏£‡∏ß‡∏°: {summary['‡∏£‡∏ß‡∏°']:,.0f} ‡∏ö‡∏≤‡∏ó")
                lines.append(f"üçü ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏≠‡∏≤‡∏´‡∏≤‡∏£: {summary['‡∏≠‡∏≤‡∏´‡∏≤‡∏£']:,.0f} ‡∏ö‡∏≤‡∏ó")
                lines.append(f"üç∫ ‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°: {summary['‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏î‡∏∑‡πà‡∏°']:,.0f} ‡∏ö‡∏≤‡∏ó\n")
                lines.append(f"üìå ‡πÇ‡∏≠‡∏ô: {summary['‡πÇ‡∏≠‡∏ô']:,.0f} ‡∏ö‡∏≤‡∏ó")
                lines.append(f"üìå ‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î: {summary['‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏î']:,.0f} ‡∏ö‡∏≤‡∏ó")
                lines.append(f"üìå ‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï: {summary['‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï']:,.0f} ‡∏ö‡∏≤‡∏ó")
                reply_text(reply_token, "\n".join(lines))
                return "ok", 200
        except:
            reply_text(reply_token, "‚ùå ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ú‡∏¥‡∏î ‡πÄ‡∏ä‡πà‡∏ô: ‡∏£‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 01/06/2025")
            return "invalid", 200

    # ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    lines = msg.strip().split("\n")
    records = []
    for line in lines:
        parts = line.rsplit(" ", 2)
        if len(parts) == 3:
            item, amount, category = parts
        elif len(parts) == 2:
            item, amount = parts
            category = "-"
        else:
            continue
        try:
            amount = float(amount.replace(",", ""))
            records.append((user_id, item.strip(), amount, category.strip(), "expense", today_str))
        except:
            continue

    if records:
        conn.executemany("INSERT INTO records VALUES (?, ?, ?, ?, ?, ?)", records)
        conn.commit()
        df = pd.read_sql_query("SELECT item, amount, category FROM records WHERE user_id=? AND date=? AND type='expense'", conn, params=(user_id, today_str))
        total_today = df["amount"].sum()
        reply = [f"üìÖ ‡∏£‡∏≤‡∏¢‡∏à‡πà‡∏≤‡∏¢‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ ({today_display})"]
        for _, row in df.iterrows():
            if row["category"] != "-":
                reply.append(f"- {row['item']}: {row['amount']:,.0f} ‡∏ö‡∏≤‡∏ó ({row['category']})")
            else:
                reply.append(f"- {row['item']}: {row['amount']:,.0f} ‡∏ö‡∏≤‡∏ó")
        reply.append(f"\nüí∏ ‡∏£‡∏ß‡∏°‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ: {total_today:,.0f} ‡∏ö‡∏≤‡∏ó")
        reply_text(reply_token, "\n".join(reply))
        return "ok", 200
    else:
        reply_text(reply_token, "‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ")
        return "fail", 200

if __name__ == "__main__":
    app.run(host="0.0.0.0", port=int(os.environ.get("PORT", 8080)))
